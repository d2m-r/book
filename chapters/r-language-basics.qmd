---
title: "R Language Basics"
---

## Overview

R is a programming language and software environment based on another programming language called S.
It is primarily used for data management, analysis, and presentation. 
R is free to use and open-source, making it both approachable to new learners and flexible for advanced users. 
R is built on collaboration and transparency, with a large community contributing to the development of the language and tools extending its functionality.
The R community also works to make R accessible and functional, with extensive documentation for the language itself and its packages of functions.
Beyond documentation, you can find a wealth of user-created resources for learning and using R, including freely available tutorials, videos, workshops, and full courses and textbooks (ahem).

<!-- this should be a callout/box instead of a subsection -->
#### R vs. Python

Both R and Python are popular choices for statistical analysis and visualization in research, and the two have a lot in common.
They are both free, open-source languages with large communities and extensive libraries of functions. 
The biggest difference between the two is that R is primarily focused on statistical analysis and visualization, while Python is a general-purpose programming language that can be used for data analysis as well as a range of other applications.

If Python can do so much more than R, why would anyone use R? Because the Python's versatility is a little bit of a double edged sword.
Of course Python can handle complex data analysis like R, but R is *designed* for this stuff.
Because R is highly specialized, a little code and knowledge go a long way.
You do the work of knowing what kinds of data problems you need to solve, and R and the R community will give you powerful and precise tools to solve them.^[Absolutely no shade on Python here. Yay Python! A+ great job! But this is a class about R.]

Although Python is more widely used generally, R tends to be favored in academic and research settings, especially in the social sciences.
As a psychologist, I care about managing data in reproducible and transparent ways, conducting and reporting a range of statistical analyses, and creating high-quality, publication-ready visualizations.
R lets me get straight to the point to do all that, and it lets me do it without having to learn a language enough to really call myself a "programmer."

#### RStudio

We talked about RStudio in @sec-rstudio, but in case you missed it, here's some things to know as you get started with R.

R is a programming language; RStudio is an integrated development environment (IDE) for that language. You interact with R via the RStudio software. R exists without RStudio, but not the other way around.

Well, at least in theory. In practice, RStudio is *the* way to interact with R. It's a (relatively) user-friendly interface for writing and executing R code that is pretty streamlined to the needs of the R user. 
Unlike other popular IDEs (e.g., Visual Studio, AWS, Eclipse), RStudio doesn't need to meet the needs of *any* programmer who might be doing *anything* in *any* language.
Consequently, RStudio is the go-to for R users, since it lacks the clutter that comes with general-purpose IDEs.

**WYNTKN:**

1. R =/= RStudio...
2. ...but it kinda might as well.

#### Object-oriented programming

R is an *object-oriented programming language*, which means that it is built around the concept of "objects" that contain data and functions.
What's an object? 
According to [Wikipedia](https://en.wikipedia.org/wiki/Object_(computer_science)), an *object* is "an entity that has state, behavior, and identity."
I personally find that definition to be baffling, because like...isn't that anything?

Well, it kind of *is* anything. You can think of objects in R as any *thing* you want to work with in R.
If it's something you'd want to put a label on for some reason, that's an object.
A number or string as a variable to use later? Object.
A table with data? Object.
The output of a statistical test? Object.
A plot? Object.

You get the idea. 
Basically, every time you open up a new R session, you are the god of a tiny little empty world. 
If you want to see something happen in your world, you have to create the stuff that does the happening and is happened to and is the happening.^[I study language. I'm allowed to talk nonsense like this.]
Want to watch the denizens of your universe put on a play about a magician who eats too much cheese?
You have to bring into existence the players, the script, and the stage, but also the concepts of "play," "magician," "cheese," "eating", and "the amount that is socially and/or biologically too much cheese."

In R, if you want to see a graph of the relationship between how much cheese an individual eats and whether or not they are a magician, you have to create that world with objects -- the *environment*. 
The variables "how much cheese" and "is magician?" are objects. The rows, columns, and values that make up a table of data are objects. Those objects are all inside of an object that is the table itself. The calculation of the association between the two variables is an object. The graph that visualizes the relationship is an object. The axis labels on the plot object are objects...

What you need to know: 

1. R works by doing stuff to stuff. 
2. So "stuff" has to exist.

## R syntax

In natural language, syntax is the system of rules that govern how words are combined to form phrases and sentences in meaningful ways. Sentence makes mixing nothing all words of at the a it something up else or mean.^[Mixing up the words of a sentence makes it mean something else or nothing at all.] 

<!-- Men in tights clip of sheriff of rottingham -->
{{< video https://www.youtube.com/embed/CKhGiFOMsS0 >}}

Some things are nouns, some are verbs. Some verbs need objects, some don't. Some words mean more than one thing and require specification or context. Some words connect other words together. Some words don't serve a lot of functional purpose but make the sentence sound better or easier to understand. Words like pronouns can replace other words, but only after following the rules to let you do that. Some words you can omit entirely by restructuring other parts of the sentence. Some rules will technically communicate a meaning correctly, but are much more understandable if there is non-speech stuff like gestures or facial expressions to help clarify the meaning. Some rules are more flexible than others, and some are more rigid. Some rules are more important than others, and some are more about style than substance.

In a programming language, syntax works similarly. R syntax is the set of rules that govern how you write code in R to make it do what you want it to do.
For each example I gave for natural language above, I can think of at least one equivalent situation. Adding in stuff that isn't necessary to make it easier to read? That's taking advantage of R being whitespace insensitive. Using gesture to complement ambiguous meaning? That's using comments. Eliding a subject because it's implicit or otherwise already understood? That's skipping optional arguments in functions, or using the pipe operator to pass objects from arguments in one function to arguments in another. You get the picture.

While programming languages are nowhere near as complex and dynamic as natural languages, you can think about programming syntax as using the same kinds of building blocks.

### Environments

Your R *environment* is the collection of objects that exist in your R session at any given time. 
When you start a new R session, your environment is empty.
Creating variables, data structures, functions, plots, and other objects adds them to your environment so you can refer to them later.

Everything in your environment has a unique identifier, the name you give the object.
Because identifiers are unique, creating an object with the same name as an existing object will overwrite the existing object with the new one.

You can see the objects in your environment by looking at the Environment pane in RStudio, or by using the `ls()` function in the R console to list the objects in your environment.
Critically, you can only interact with objects that exist in your environment, and environments are not persistent across R sessions.
When you close RStudio, your environment is cleared, and you have to recreate any objects you want to use in the next session.


### Variables

*Variables* are the nouns of R syntax. 
The read world is filled with "things," literal and abstract.
Coffee, computer, RStudio, exhaustion, education, Stardew Valley Junimo plushie, the joy of playing Stardew Valley when you should be working...
They just kind of exist.
I can interact with them directly, but I can't list out for you the Stardew Valley decor in my office^[And I assure you, it's a lot more than a single Junimo plush.] unless I name them.
The Junimo is a value, and "Junimo" is the variable name I use to refer to that value.

![](../images/desk.png)

In R we create variables by assigning a value to a name with the assignment operator `<-`. Technically you can use `=` to assign a value to a variable, but you really shouldn't; `<-` [is the preferred assignment operator in R](https://www.r-bloggers.com/2014/01/difference-between-assignment-operators-in-r/).

Once you have created a variable, you can use it in your code to refer to the value it contains, including assigning other variables.

For example:

```r
the_answer <- 42
pi <- 3.14159
round_answer <- pi*the_answer

my_name <- "Natalie"
your_name <- "Lucas"
our_names <- c(my_name, your_name)
```

You can even assign values to variables using the existing variable itself:

```r
best_game <- "Stardew"
second_word <- "Valley"
best_game <- paste(best_game, second_word)
```

### Functions {#function-basics}

If variables are nouns, *functions* are the verbs of R syntax.
Functions take stuff and do stuff to it.

You can recognize a function in R as a word(ish) followed by `()`: `mean`, `filter()`, `ggplot()`.

A function is an action itself -- working, eating, procrastinating, voting -- which exists conceptually on its own just fine.
Calculating a mean, filtering to a subset of data, mapping data to a plot -- all sensible and understandable on their own, but not necessarily implementable as is.

To employ a function and tell R to do the thing, you will (usually) put one or details inside the parentheses: `mean(x)`, `filter(data, condition)`, `ggplot(data = df, aes(x = var1, y = var2))`.
These are called *arguments*, and can be values, variables, or even other functions.

When you pass an argument to a function (i.e., you include it in the parentheses), the function does the action to the argument(s) and *returns* the result.

We'll talk more about arguments in @sec-programming-functions. For now, **YNTK:**

1. Functions take 0 or more arguments.
2. Arguments can be required or optional.
3. View all possible arguments in a function's documentation with `?functionname` or `??functionname`.
4. If you pass arguments to a function in the order they are defined in the documentation, you can omit the argument names. Otherwise you start with `theargumentname =`.
    - `round(3.14159)` is the same as `round(x = 3.14159)`, but `round(3.14159, 2)` is not the same as `round(digits = 2, x = 3.14159)`.


```r
# Load the tidyverse packages to use filter, mutate, str_length, and ggplot
library(tidyverse)

# String

# Create a numeric vector of favorite numbers and calculate the mean
favorite_numbers <- c(11, 37, 42, 101, 202, 1000, 2025, -3)
number_words <- c("eleven", "thirty-seven", "forty-two", "one hundred one", 
                  "two hundred two", "one thousand", "two thousand twenty-five", "negative three")

# Do some simple functions with the vectors
mean(favorite_numbers)  # returns 426.875
length(number_words)  # returns 8

# Create a data frame with two columns: number and word
numbers_df <- data.frame(
  number = favorite_numbers,
  word = number_words
)

# View the first 6 rows of the data frame
head(numbers_df)

# View the first 3 rows by adding an optional argument
head(numbers_df, n = 3)  # returns first 3 rows

# Return rows where number is greater than 100
filter(numbers_df, number > 100)  

# Add a new column 'length' with the number of characters in 'word'
numbers_df <- numbers_df |> 
    mutate(length = str_length(word)) 
    
# Plot the relationship between the number and the length of its word representation
ggplot(numbers_df, aes(x = number, y = length)) +
    geom_point() +
    geom_smooth(method = "lm")
```

It's not important right now that you understand everything going on in the code above.
For now, just look at how functions are represented, what arguments can look like, how some arguments are optional, and what the function returns (or doesn't return) as output.


#### Functions to get your started

Now is a good time to play around with R functions to get a feel for how they work.
The functions below are a collection of some of the base R functions you're likely to use often.
Try running the examples in your R console to see what they do, then try changing the inputs to see how the output changes.

You can also use the `?functionname` command to view the documentation for any function, which will describe what the function does, its arguments, and its return value.

##### Generally useful base R functions

| Function | Description | Example | Output |
|----------|-------------|---------|--------|
| `c()`    | Combine values into a vector | `c(1, 2, 3)` | `c(1, 2, 3)` |
| `paste()` | Concatenate strings together | `paste("Hello", "world!")` || `"Hello world!"` |
| `data.frame() ` | Create a data frame from vectors | `data.frame(x = 1:3, y = c("a", "b", "c"))` | A data frame with 3 rows and 2 columns named `x` and `y` |
| `class()` | Check the data type of an object | `class(3.14)` | `"numeric"` |
| `str()`  | Display the structure of an object | `str(mtcars)` | A summary of the `mtcars` data frame |
| `length()` | Get the length of a vector | `length(c(1, 2, 3, 4, 5))` | `5` |
| `head()` | View the first few rows of a data frame or vector | `head(mtcars)` | The first 6 (default) rows of the `mtcars` data frame |
| `summary()` | Get a summary of a data frame or vector | `summary(mtcars)` | Summary statistics for each column in the `mtcars` data frame |

##### Math & statistics

For the examples below, start with defining a vector of numeric values:

```r
number_list <- c(11, 37, 42, 101, 202, 1000, 2025, -3)
```

| Function | Description | Example | Output |
|----------|-------------|---------|--------|
| `round()` | Round a numeric value to a specified number of decimal places | `round(67.1988, 2)` | `67.2` |
| `sum()`  | Calculate the sum of a numeric vector | `sum(number_list)` | `3415` |
| `min()`  | Find the minimum value in a numeric vector | `min(number_list)` | `-3` |
| `max()`  | Find the maximum value in a numeric vector | `max(number_list)` | `2025` |
| `mean()` | Calculate the mean of a numeric vector | `mean(number_list)` | `426.875` |
| `median()` | Calculate the median of a numeric vector | `median(number_list)` | `71.5` |
| `sd()`   | Calculate the standard deviation of a numeric vector | `sd(number_list)` | `726.7457` |
| `cor()`  | Calculate the correlation between two numeric vectors | `cor(number_list[1:4], number_list[5:8])` | `-0.2855236` |



### Data types

Data you can work with in R takes one of 6 forms: numeric, integer, complex, character, logical, and raw.

For our purposes, we don't need to worry about complex and raw data types. *Complex* objects use complex (i.e. both real and imaginary $i$); *raw* objects are used to represent literal binary data. It's unlikely that as a researcher in psychology or other social sciences you will need to use these data types directly, but you can start to learn more about complex numbers in R [here](https://www.r-bloggers.com/2009/12/using-complex-numbers-in-r/) and raw data [here](https://rdrr.io/r/base/raw.html) if you're interested.

Aside from these 6 "base" data types, we commonly talk about a few other kinds of things using the same kind of language we use to talk about data types, including factors, dates, and date-times.

Here's a table summarizing the 3 R base data types we use frequently and the 4 honorary ones:

| Data type | Description | Example |
|-----------|-------------|---------|
| Numeric   | Decimal numbers, including whole numbers | `3.14`, `42.0`, `-1.5` |
| Integer   | Whole numbers, represented with an `L` suffix | `42L`, `-1L`, `1000L` |
| Logical   | Boolean values, either `TRUE` or `FALSE` | `TRUE`, `FALSE`, `x > 5` |
| Character | Text strings, enclosed in quotes | `"hello"`, `'123'`, `"R is great!"` |
| Factor    | Leveled categorical data, stored as integers with labels | `factor(c("low", "medium", "high"))` | 
| Date      | Dates, stored as a special class of object | `as.Date("2025-01-31")` |
| POSIXct   | Date-time objects, which include both date and time | `as.POSIXct("1776-07-04 12:01:59")` |

You can check the data type of an object using the `class()` function, which will return the class of the object. 
Try using `class()` on the examples above to see what it returns, like:

```r
class(3.14)          # "numeric"
class(42L)           # "integer"
class(TRUE)          # "logical"
class("hello")       # "character"
class(factor(c("low", "medium", "high")))  # "factor"
class(as.Date("2025-01-31"))  # "Date"
class(as.POSIXct("1776-07-04 12:01:59"))  # "POSIXct" "POSIXt"
```

Notice that for our 3 honorary data types we didn't just pass it a value, we passed it a function that turned a value into the type we wanted.

When you run `class()` and it returns something, it's creating a data object which has to have a type itself. 
See if you can figure out what kind of data is being returned with `class()` by using `class()`^[If you run `class(class(3.14))`, it will return `"character"`.]

#### Numeric

*Numeric* variables are, unsurprisingly, numbers. 
Basically any number that you can treat like a number.
If you added 0 to it, would it equal itself? If so, it's numeric. (As opposed to a string that looks like a number, like `"100"`. Can't add 0 to that, and if you did, it would probably be something like concatenation: `"1000"`.)

Create a numeric variable by assigning a number made up of digits, decimals, and/or negative signs to a variable name:

```r
my_number <- 3.14
my_other_number <- -42
```

#### Integer

The *integer* variable is a subset of numeric variables.
A number that does not have a decimal point is an integer.
Integers are whole numbers (1, 5, 100000), negative whole numbers (-1, -5, -100000), and zero (0).

Pick your favorite number without a decimal point, and assign it to a variable name, then run `class()` on that variable to see its data type:

```r
lucky <- 11
class(lucky)  # ???integer???
```

Running class on something that looks like an integer will return numeric, not integer.
Remember that integers are a subset of numeric variables, so R is taking a better-safe-than-sorry approach and assuming you want the more generic, broad-scope version of what you gave it.

If you want to specify a variable as an integer, you can do so by adding an `L` suffix to the number when you assign it to a variable:

```r
luckier <- 11L
class(luckier)  # "integer"!
```

You can also convert an existing numeric value to an integer with `as.integer()`:

```r
my_number <- 42
class(my_number)  # "numeric"
my_integer <- as.integer(my_number)
class(my_integer)  # "integer"
```

You can use `as.integer()` on non-integer numeric values. The result will be everything before the decimal point, effectively rounding down to the nearest whole number:

```r
my_decimal <- 4.2 # numeric type
another_integer <- as.integer(my_decimal) # 4 - integer type
```

Specifying data as integer with `L` or converting it with `as.integer()` typically isn't necessary, but it can be useful when you need to ensure that a value is treated as an integer, like as an argument of a function that only accepts integers.

The flip of the integer is a *double* variable, which is the default numeric type in R. 
It just means the number can have a decimal point, whether or not it's visually represented. 
Since numeric values are double by default, you won't see `class()` return "double", you just mentally note that that's what you've got.

#### Character {#sec-data-types-character}

*Character* variables are "strings" of text, which can include letters, numbers, punctuation, and other symbols.
You'll hear a few different terms that all functionally mean the same thing, including "character", "string", "character vector", and "text".

A *character* is the smallest element that can be represented in text. Individual letters like "d" or "R", digits like "2", and symbols like "-".
R is case sensitive, so "d" and "D" are different characters.

Think of a *string* as the actual sequence of characters strung together. `d2m-R` is a string of 5 characters: `d`, `2`, `m`, `-`, and `R`.

A *character vector* is a collection of one or multiple strings.
The string `d2m-R` is a list of 1 sequence of (5) characters.

This gets confusing, but in practice this doesn't matter much.
*Text* is a more general term without a specific technical definition in R, often used to talk about strings and character data.

You'll often hear "text," "string," and "character" used interchangeably. You just need to know that "character" is the technical term for the data type in R and "string" is the sequence of text that your human brain is processing as a single meaningful unit.

We create a character variable by assigning a string of text to a variable name, using either single or double quotes to enclose the text:

```r
with_single_quotes <- 'This string uses single quotes.'
with_double_quotes <- "This string uses double quotes."
```

Why the option to use either single or double quotes?
Try running these two lines of code:

```r
no_single_quotes <- "This string doesn't use single quotes."
no_double_quotes <- 'This string doesn't use double quotes.'
```

The second line will throw an "unexpected symbol" error.
R saw you start a string with `'`, looked for another `'` to end the string, and treated everything between them as the string.
When it got to the "t" in "doesn't", R no longer thought you were trying to define a string, and it didn't know what do with the input `t use double quotes.'`

Generally I recommend using double quotes for strings, since it avoids the need to escape single quotes in contractions and possessives.
Use single quotes in the rare cases you need to include double quotes in a string.

In @sec-stringr, we'll cover how to include single quotes in single quoted strings (and double in double) if needed by *escaping* the quote character with a `\`.
In that chapter we'll talk a lot more about working with strings in R, including how to manipulate and analyze text data using the tidyverse [`stringr` package](https://stringr.tidyverse.org/), your go-to for working with strings in R.


#### Logical


#### Factor


#### Dates & Date-Times


#### Missing data (NA)


### Operators

#### Arithmetic

#### Comparison

#### Logical

#### Other core operators

| Operator | Description | Example | Output |
|----------|-------------|---------|--------|
| ` <- ` or ` = ` | Assignment operator | `x <- 5` or `x = 5` | Assigns the value `5` to the variable `x` |
| ` : ` | Create a sequence of integers | `1:5` | `c(1, 2, 3, 4, 5)` |
| ` [ ] ` | Subset elements of a vector, list, or data frame by position or name | `list(first = 1, second = 2)[2]` | `> $second > [1] 2` |
| ` [[ ]] ` | Extract a single element from a list by position or name | `list(first = 1, second = 2)[[2]]` | `2` |
| ` $ ` | Extract a single element from a list or data frame by name | `list(first = 1, second = 2)$second` | `2` |
| ` |> ` or ` %>% ` | Pipe operator to pass the output of one function as the input to another | `data |> filter(condition)` | Passes `data` as the first argument to `filter()` |

#### Shortcuts/wrappers


### Comments

Comments are segments of text ignored by R when it runs your code.
The pound sign # tells R to ignore anything that follows on the same line.

Use comments often to add plain-English, collaborator-friendly explanations for what your code does.
You can temporarily comment out code if 1) you think you may delete it later or 2) there will be some cases where you want R to ignore the code (leave commented) but other times you want it to run (uncomment).


Add long comments by starting the line with 1 or more #. For blocks of comments that span multiple lines, start every line with a #.

Put a # before code to temporarily "comment it out." This code will be ignored by R until you remove the #.

Comments can begin in the middle of a line. R will run everything before the # and ignore everything that follows.




## R data structures

### Vectors

multiple scalar objects (values) stored in a particular order; values can be any data type including NA

### Lists

### Matrices

multiple vector objects of a single data type stored in a particular order; combine vectors as columns (cbind()) or rows (rbind()), or distribute a vector across named rows and columns (matrix())


### Data frames

Data frames are lists of equal-length vectors: data.frame()
The heart <3 of R
Vectors can use different data types
Values within each vector (column) are the same data type
Technically a list, but takes a tabular format (like a matrix)
Tibbles are simplified data frames: tibble()
Used in the tidyverse (more later)
For our (and most) purposes, can be treated interchangeably with data frames


### Tibbles

## Learn More


<!-- Citations to add -->
<!-- white_2009_using -->
