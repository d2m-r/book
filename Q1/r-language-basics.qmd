---
title: "R Language Essentials"
---

# Introduction

## What is R and why use it?

## Object-oriented programming

# R syntax

## Variables

## Functions

## Data types

## Operators

# R data structures

## Vectors

## Lists

## Matrices

## Data frames

## Tibbles

# R packages

R *packages* (also known as libraries) are collections of R functions, data, and documentation bundled together to extend the functionality of R. Without packages, you are working with *base R*, a core set of "built-in" functions and data types.

Base R includes:

1.  Key data structures, such as vectors, lists, matrices, and data frames
2.  Operators, so you can do basic math, evaluate logical comparisons, and create data objects
3.  Functions that sufficiently carry out common tasks, like reading in tabular data, extracting and manipulating object elements, performing simple summary statistics (and much more)
4.  Functions that allow a *basic* implementation of most data analysis tasks, such as reading in data, manipulating data, and plotting data

But base R is not sufficient for most data analysis tasks beyond the most basic.

Thankfully, that's not a problem. The (relative) simplicity of base R is a feature, not a bug. Base R provides the tools to build progressively more complex and specialized functionality, and the open-source nature of R makes it possible for anyone (literally anyone!) to create and share the more complex functions they develop in the form of packages.

These collections of functions can be designed for extremely specific use cases or broad application for use across many contexts.

Let's see some examples of packages for two different purposes, from very broad to very narrow in each category:

| Package(s) | Scope | Description / Use Case |
|----------------------------------|-----------------|---------------------|
| **Data read-in and write-out** |  |  |
| [`readr`](https://readr.tidyverse.org/) | Broad | Import/export of tabular delimited data |
| [`haven`](https://github.com/hadley/haven), [`foreign`](https://rdrr.io/cran/foreign/) | Medium | Load data from proprietary formats (Stata, SPSS, SAS) |
| [`googlesheets4`](https://googlesheets4.tidyverse.org/) | Narrow, but common | Import/export of Google Sheets |
| [`DBI`](https://dbi.r-dbi.org/) | Narrow | Import/export of databases (SQL, etc.) |
| [`phonfieldwork`](https://docs.ropensci.org/phonfieldwork/index.html) | Very narrow | Import/export of phonetic fieldwork data (Praat, ELAN, etc.) |
| **Data visualization** |  |  |
| [`ggplot2`](https://ggplot2.tidyverse.org/) | Broad | Grammar of graphics for flexible and complex visualizations |
| [`plotly`](https://plotly.com/r/) | Broad, but less popular | Interactive visualizations |
| [`vcd`](https://cran.r-project.org/web/packages/vcd/index.html) | Medium | Tools for visualizing categorical data |
| [`ggalluvial`](https://corybrunson.github.io/ggalluvial/), [`ggmosaic`](https://haleyjeppson.github.io/ggmosaic/) | Narrow | Specialized plots with ggplot grammar (alluvial, mosaic) |
| [`xkcd`](https://cran.r-project.org/web/packages/xkcd/index.html), [`ggsci`](https://nanx.me/ggsci/) | Very narrow | Apply pop culture-inspired styles to plots |

These are all packages that I personally use, some (much) more than others. Some of these are so ubiquitous that you can forget they aren't base R (looking at you, `readr`); others I'd be willing to bet 99% of readers of this book have never heard of and would never have occasion to use (`phonfieldwork`, `xkcd`[^r-language-basics-1]).

[^r-language-basics-1]: Then again, I'd argue everyone should more enthusiastically integrate xkcd into their work.

Coming back to thinking about packages vs. base R, it's even more package-y than it sounds. When we talk about "base R," we're actually talking about a collection of packages including `base`, `stats`, `utils`, and `graphics`, among others. Yes, one of the packages in "base R" is called `base`, which is admittedly confusing. If you're curious, you can spot base R packages in your packages pane. They are the ones that (thankfully) don't have an option to delete them. You can also view a list of base packages with:

``` r
rownames(installed.packages(priority = "base"))
```

What you absolutely need to take away from this is that packages are the key to R's power and flexibility. **Packages *are* R. They are not extra.** They are the whole premise of R as a programming language. Don't be afraid to seek out packages that do what you need, to play around with popular packages even if you don't have a use for them now, or to [try your hand at creating your own](https://r-pkgs.org/index.html).

## Installing and loading packages

### Installing packages

*Install* a package with the base R function `install.packages()`. This function takes a character string with the name of the package you want to install. For example, to install the `dplyr` package, you would run:

``` r
install.packages("dplyr")
```

This will download the package from CRAN (the Comprehensive R Archive Network) and install it on your system. You only need to do this *the first time* you use a package. You do not need to reinstall a package at every new session, but you can use this same command to update a package to the latest version if one is available.

The packages pane shows you a list of installed packages. You can also install directly from the packages pane, but you shouldn't, so I'm not going to tell you how.



### Attaching packages

### Dependencies

The same way that package functions are built using base R functions, packages also frequently (usually) build on functions from other packages. When a package uses functions from another package, that other package is its *dependency.*

There are two big categories of dependencies, *hard* and *soft* dependencies. Hard dependencies are required. Functions in the package won't work without them. Soft dependencies are recommended to get the most out of the package, but not strictly necessary. We've got three flavors of dependencies in R:

1.  **Depends:** Packages that must be *installed and attached* for the package to work
2.  **Imports:** Packages that must be *installed* (but not attached) for the package to work
3.  **Suggests:** Packages that are not required for the package to work, but are recommended for full functionality

You can see a package's dependencies in its CRAN documentation. In a kind of meta example, let's look at the [`devtools` package](https://cloud.r-project.org/web/packages/devtools/index.html), which is a package for making packages.

![devtools Dependencies](../images/screenshots/devtools-dependencies.png)

Let's try installing and then loading the devtools package to see what's going on here.

Start with a fresh R session by restarting R in RStudio (Session \> Restart R). Take a look at your packages pane. Check to see whether any of the following packages are already in your list of installed packages:

-   `devtools`
-   `usethis`
-   `memoise`
-   `roxygen2`
-   `foghorn`
-   `spelling`

Since you have already set up RStudio to work with GitHub[^r-language-basics-2], you should have some of these packages installed already. You probably won't have all of them installed, but if you do, take a look at the full list of Imports and Suggests from the [`devtools` package documentation](https://cloud.r-project.org/web/packages/devtools/index.html) and try to find some you're missing.

[^r-language-basics-2]: You did set up RStudio to work with GitHub, didn't you?

If you started from a new R session, any of these packages that you do have installed should not be attached to your environment. That means that even if you see the package name listed in the packages pane, it should not be checked. Assuming you do have at least one of these packages installed, see what happens when you try to use functions from it before attaching it.

For example, try running the `edit_r_profile()` function from `usethis`:

``` r
edit_r_profile()
```

Since `usethis` isn't currently attached, R doesn't know what it should be referencing when it sees this function. You should get an error message like:

`Error in edit_r_profile() : could not find function "edit_r_profile"`

But as long as you have `usethis` installed, you *can* use functions from it even without them in your environment. You *load* a function from an unattached package with `::` syntax, like this:

``` r
usethis::edit_r_profile()
```

Provided you have `usethis` installed, this should open up a (probably empty) text document called `.Rprofile`.

This difference between running functions from attached packages and running functions from installed but unattached packages is key to the difference between the two kinds of required dependencies. Basically, "depends" require an attached package, while "imports" only require an installed package.

Let's try it out with `devtools`. It doesn't matter if you have `devtools` installed or not, but if you do, make sure it is not attached (i.e. it's not check in the packages pane). Install (or reinstall/update) the package with the following console command:

``` r
install.packages("devtools")
```

The `devtools` packages *depends* on base R and the [`usethis` package](https://cloud.r-project.org/web/packages/usethis/index.html). In order for functions from `devtools` to work, you need to have `usethis` installed on your system, so the installation process for `devtools` will also install `usethis` if it is not already installed.

| In your packages pane, check to see whether `devtools` and `usethis` are now listed (they should be) and checked off (they shouldn't be).

The `devtools` package *imports* a number of packages, including `cli`, `memoise`, `roxygen2`, and more. Like the `usethis` depend, these packages are required for `devtools` to work. Like with `usethis`, these will be installed automatically if they are not already installed on your system.

| In your packages pane, check to see whether `cli`, `memoise`, or any other `devtools` imports you didn't have installed already are now listed (they should be) and checked off (they shouldn't be).

The last kind of "dependency" is a soft one: `devtools` *suggests* a number of packages, including `covr`, `foghorn`, and `spelling`. These packages are not required for `devtools` to work, just recommended.

| In your packages pane, check to see whether `covr`, `foghorn`, or any other `devtools` suggestions you didn't have installed already are now listed and checked off (they shouldn't be either).

Now that `devtools` and its required dependencies (depends and imports) are installed, let's load our new package:

``` r
library(devtools)
```

This attaches the named package (`devtools`) and its "depends", but not the "imports" or "suggests". You can see this in the packages pane. `devtools` and `usethis` should be checked, but `cli`, `memoise`, `foghorn`, and any other imports or suggests should not be checked.

Now we can use functions from `devtools` and `usethis` without needing to use the `::` syntax. For example, we can run the `edit_r_profile()` function again:

``` r
edit_r_profile()
```

It should open up your `.Rprofile` text file, the same way it did with the `::` syntax before. (You can still use the `::` syntax even when it's attached if you want.)

Attaching `devtools` did *not* attach the import and suggest dependencies. See what this means using a simple function from the `sessioninfo` package, which was installed as a `devtools` import. Try running the `session_info()` function both with and without `::` syntax:

``` r
os_name() # returns an error
sessioninfo::os_name() # returns the name of your operating system
```

The `::` syntax is letting you *load* functions without *attaching* them, but you can't load a function that isn't installed. The `devtools` suggested package `foghorn` was not automatically included in installation, and you probably don't already have it installed yourself, so let's try a simple function from that package:

```r
cran_results(pkg = "devtools") # returns an error
foghorn::cran_results(pkg = "devtools") # also returns an error
```

If you wanted to get a summary of errors, warnings, and other issues associated with the `devtools` package on CRAN, you would need to install the `foghorn` package first, then either attach it or load it with `::`.

![devtools Reverse Dependencies](../images/screenshots/devtools-reverse-dependencies.png)

### More on packages

#### Install isn't working!

The `install.packages()` function only works with packages that are available on CRAN. The vast majority of packages are available this way, but not all. For example, the `citr` package we will use for easy citation management with Quarto is not available on CRAN due to some CRAN-specific requirements, but is still actively maintained and functional. 

In cases like this we can install the package directly from its GitHub repository using the `devtools` package. What a funny coincidence that we just installed this package! To install a package from GitHub, you can use the `devtools::install_github()` function which takes a string argument of everything in the GitHub repo URL following "github.com/". For example, to install the `citr` package, you would run:

``` r
devtools::install_github("crsh/citr")
```

Just because a package is not on CRAN does not mean it is not useful, reliable, or trustable -- `citr` is a great example. Still, you should be cautious with packages that are not on CRAN, as they may not have the same level of scrutiny or quality control as those that are. 

If needed, you can also learn more about [alternative ways to install packages](https://www.dataquest.io/blog/install-package-r/).

#### Same function, different packages, oh no!

Function not behaving as expected? Did it do one thing yesterday and something totally different today? The most likely reason is that you messed up your code between then and now. The second most likely reason is that you have two packages loaded that both have a function with the same name, and one of them is masking the other.

Anyone can make a package, and packages have lots of overlap in use. 
There are going to be lots of things that do exactly the same thing but are called different things in different packages. 
There are also just a lot of functions that are going to be named the same thing.
Neither situation is a problem, but you do need to be able to recognize when it happens. Once you do, it's easy to address.

My go-to example for the many-names-same-thing situation is running ANOVAs. 

There are a lot of packages that have functions for running ANOVAs that all do (basically) the same thing, but they have different names. For example, `aov()` in base R, `anova()` in `stats`, `anova_test()` in `rstatix`, and `anova.psych()` in `psych`. They all run ANOVAs, but they are different functions with different arguments and outputs. You just need to know which one you want to use and how to use it.

If you need to run an ANOVA, you can choose the one that's best suited to your needs. If you just have a simple comparison of means to run, you can go with base `aov()`. If you want to run a more complex ANOVA with post-hoc tests, you might want to use `anova_test()` from `rstatix`. If you want to run a repeated measures ANOVA, you might want to use `anova.psych()` from the `psych` package. If you want to use ANOVA to compare model fit, you could use `anova()` from `stats`.

It's a *good* thing to have a lot of options, but it's up to you to keep straight which function does what, where it comes from, how to implement it, and how to interpret the output. Keep in mind that your collaborators (including future-you) may not have the same familiarity or preferences as you do, so it's a good idea to add comments to your code about why you chose a particular function or package for a specific task.

More confusing is the case where two packages have functions with the same name that do somewhat or very different things. Mixed effects linear models get me here. The `lme4` package is the most popular package for running mixed effects models, and it includes a function called `lmer()`. This particular `lmer()` has a problem, though: it doesn't include $p$-values. Despite my personal objections to the [obsession with $p$-values](https://www.taylorfrancis.com/chapters/edit/10.4324/9781315629049-15/eight-common-false-objections-discontinuation-significance-testing-analysis-research-data), the reality is that I almost always need to report them. The `lmerTest` package has a function that does return $p$-values...also called `lmer()`. When I call `lmer()`, what is R to do?

The simplest solution is to just use one package or the other. If I have `lmerTest` loaded (more accurately, *attached*) but not `lme4`, then `lmer()` will refer to the `lmerTest` function. Neat.

Ok fine, but `lme4` has a lot of functionality beyond this one specific `lmer()` function that I want to be able to take advantage of. I want both packages loaded. In this case, R uses *masking* to decide which package's function to use. When you attach a package to your session, R attaches all its packages. When you attach another package, it attaches all its packages -- even if there was already a package with the same name attached. The new function *masks* the old one.

The take-away is that you need to pay attention to the order in which you load packages. If I load `lme4` first and then `lmerTest`, I'll have `lmerTest`'s $p$-value version of `lmer()` by default, but I'll still have access to everything in `lme4` that wasn't overridden by `lmerTest`.

Alternatively or additionally, you can use the `::` syntax to specify which package's function you want to use. Remember that `::` searches your installed packages for the function, so you can just specify precisely which version of the function to use and when. This gets very cumbersome, so it's not something you should default to, but it has important advantages. It's explicit, so you-the-user and your collaborators know exactly which function is being used. It takes package loading order out of the equation. It also lets you use functions from packages that are not attached, so you can avoid the masking issue entirely.



    
    

### Functions with the same name in different packages that do different things

## Commonly used packages in D2M-R
